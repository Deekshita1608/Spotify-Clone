/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.example.Spotify.clone;
import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.*;
import java.util.HashSet;
import javazoom.jl.decoder.Bitstream;
import javazoom.jl.decoder.JavaLayerException;
import javazoom.jl.player.Player;
import java.util.Random;
import javax.swing.plaf.basic.BasicSliderUI;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
/**
 *
 * @author deeks
 */
public class Home extends javax.swing.JFrame {

    /**
     * Creates new form Home
     */
    private Player player;
    private Thread playerThread;
    private boolean isPlaying = false;
    private boolean isPaused = false;
    private long pauseLocation = 0;
    String Songpath;
    private FileInputStream fis;
    private BufferedInputStream bis;
    private int total_length;
    private int pause=0;
    long startTime=0;
    long elapsed=0;
    private long pausedTime = 0;
    int total_duration;
    String prev="";
    String songName;
    boolean c_visible;
    Thread progress_t;
    volatile boolean running=true;
    private HashSet<String> likedSongs;
    private String[] likedSongArray;
    private int currentIndex = 0;
    private boolean isMuted = false;
   private static final String nircmdPath = "C:\\Users\\deeks\\Desktop\\Spotify_clone\\nircmd.exe";
    public Home() {
        sqldb.connect();
        initComponents();
        more.setComponentPopupMenu(menu);
        playing_icon.setVisible(false);
        controls.setVisible(false);
        try{
        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }catch(Exception e){
            e.printStackTrace();
        }
        
        //JScrollPane scroll=new JScrollPane(jPanel4);
    }
    public Home(boolean isPlaying, String songName, String Songpath, long elapsed, boolean c_visible, int play_from, int total_length) {
        sqldb.connect();
        initComponents();
        more.setComponentPopupMenu(menu);
        playing_icon.setVisible(false);
        controls.setVisible(false);
        try{
        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }catch(Exception e){
            e.printStackTrace();
        }
        this.isPlaying=isPlaying;
        this.songName=songName;
        this.Songpath=Songpath;
        this.elapsed=elapsed;
        this.total_length=total_length;
        this.pause=play_from;
        if(c_visible){
            controls.setVisible(true);
        }
        else{
            controls.setVisible(false);
        }
        if(isPlaying){
            continue_playing(play_from);
        }
        else{
            ImageIcon play = new ImageIcon("src\\main\\Resources\\play.png");
            Image scaledImage = play.getImage().getScaledInstance(50, 50, Image.SCALE_SMOOTH);
            playpause.setIcon(new ImageIcon(scaledImage));
            pause();
        }
        try{
            ResultSet res=sqldb.fetchdata("select * from songs where lower(name)='"+songName+"'");
            if(res.next()){
                ImageIcon songImage = new ImageIcon(res.getString("image"));
                Image scaledImage = songImage.getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH);
                playing_icon.setIcon(new ImageIcon(scaledImage));
                playing_songname.setText(res.getString("name"));
                songName=res.getString("name");
                playing_songname.setForeground(new Color(204,204,204));
                playing_songname.setFont(new Font("Tahoma", Font.BOLD, 14));
                playing_artist.setText(res.getString("artist"));
                playing_artist.setForeground(new Color(204,204,204));
                playing_artist.setFont(new Font("Tahoma", Font.PLAIN, 12));
                Songpath=res.getString("location");
                curr_duration.setText(res.getString("duration"));
                String[] parts = res.getString("duration").split(":");
                int minutes = Integer.parseInt(parts[0]);
                int seconds = Integer.parseInt(parts[1]);
                total_duration=minutes*60+seconds;
            }
            
        }
        catch(Exception e){
            e.printStackTrace();
        }
        //JScrollPane scroll=new JScrollPane(jPanel4);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menu = new BlackMenu();
        file = new javax.swing.JMenuItem();
        edit = new javax.swing.JMenuItem();
        view = new javax.swing.JMenuItem();
        playback = new javax.swing.JMenuItem();
        help = new javax.swing.JMenuItem();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        rehman = new javax.swing.JButton();
        shreya = new javax.swing.JButton();
        liked = new javax.swing.JButton();
        liked1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        more = new javax.swing.JButton();
        home = new javax.swing.JButton();
        Search = new javax.swing.JTextField();
        jPanel4 = new GradientPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        bajirao_mastani = new GlowButtonExample();
        taylor = new GlowButtonExample();
        nature = new GlowButtonExample();
        ghoomar = new GlowButtonExample();
        jPanel6 = new javax.swing.JPanel();
        playing_icon = new javax.swing.JLabel();
        playing_artist = new javax.swing.JLabel();
        playing_songname = new javax.swing.JLabel();
        controls = new javax.swing.JPanel();
        playpause = new javax.swing.JButton();
        next = new javax.swing.JButton();
        previous = new javax.swing.JButton();
        progress = new CustomProgressBar();
        curr_duration = new javax.swing.JLabel();
        curr_start = new javax.swing.JLabel();
        jButton10 = new javax.swing.JButton();
        jSlider1 = new CustomSlider(0,100,50);
        like = new javax.swing.JButton();

        menu.setBackground(new java.awt.Color(17, 17, 17));

        file.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        file.setForeground(new java.awt.Color(204, 204, 204));
        file.setText("File");
        file.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fileMouseEntered(evt);
            }
        });
        file.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileActionPerformed(evt);
            }
        });
        menu.add(file);

        edit.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        edit.setForeground(new java.awt.Color(204, 204, 204));
        edit.setText("Edit");
        menu.add(edit);

        view.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        view.setForeground(new java.awt.Color(204, 204, 204));
        view.setText("View");
        menu.add(view);

        playback.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        playback.setForeground(new java.awt.Color(204, 204, 204));
        playback.setText("Playback");
        menu.add(playback);

        help.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        help.setForeground(new java.awt.Color(204, 204, 204));
        help.setText("Help");
        menu.add(help);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.setPreferredSize(new java.awt.Dimension(1280, 760));

        jPanel1.setBackground(new java.awt.Color(17, 17, 17));
        jPanel1.setPreferredSize(new java.awt.Dimension(64, 565));

        rehman.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rehman.png"))); // NOI18N
        rehman.setBorderPainted(false);
        rehman.setContentAreaFilled(false);

        shreya.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shreya.png"))); // NOI18N
        shreya.setBorderPainted(false);
        shreya.setContentAreaFilled(false);

        liked.setIcon(new javax.swing.ImageIcon(getClass().getResource("/love.png"))); // NOI18N
        liked.setBorderPainted(false);
        liked.setContentAreaFilled(false);
        liked.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                likedActionPerformed(evt);
            }
        });

        liked1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/expand.png"))); // NOI18N
        liked1.setBorderPainted(false);
        liked1.setContentAreaFilled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rehman, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(shreya, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(liked, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(liked1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(liked1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(liked)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rehman, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(shreya, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(326, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 908, Short.MAX_VALUE)
        );

        more.setIcon(new javax.swing.ImageIcon(getClass().getResource("/more.png"))); // NOI18N
        more.setBorderPainted(false);
        more.setContentAreaFilled(false);
        more.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                moreMousePressed(evt);
            }
        });
        more.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moreActionPerformed(evt);
            }
        });

        home.setIcon(new javax.swing.ImageIcon(getClass().getResource("/home.png"))); // NOI18N
        home.setBorderPainted(false);
        home.setContentAreaFilled(false);
        home.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        Search.setBackground(new java.awt.Color(31, 31, 31));
        Search.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        Search.setForeground(new java.awt.Color(204, 204, 204));
        Search.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        Search.setText("What do you want to play?");
        Search.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0));
        Search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SearchMouseClicked(evt);
            }
        });
        Search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                SearchKeyPressed(evt);
            }
        });

        jPanel4 = new GradientPanel();
        jPanel4.setForeground(new java.awt.Color(255, 255, 255));
        jPanel4.setPreferredSize(new java.awt.Dimension(1250, 565));

        jButton1.setBackground(new java.awt.Color(51, 42, 85));
        jButton1.setFont(new java.awt.Font("Yu Gothic", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/00s_bolly.png"))); // NOI18N
        jButton1.setBorder(null);
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton1.setIconTextGap(10);
        jButton1.setMaximumSize(new java.awt.Dimension(293, 65));
        jButton1.setMinimumSize(new java.awt.Dimension(293, 65));
        jButton1.setPreferredSize(new java.awt.Dimension(293, 63));
        jButton1.setRequestFocusEnabled(false);
        jButton1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/00s_bolly_rollover.png"))); // NOI18N

        jButton2.setBackground(new java.awt.Color(51, 42, 85));
        jButton2.setFont(new java.awt.Font("Yu Gothic", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bolly_dance.png"))); // NOI18N
        jButton2.setBorder(null);
        jButton2.setBorderPainted(false);
        jButton2.setContentAreaFilled(false);
        jButton2.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton2.setIconTextGap(10);
        jButton2.setPreferredSize(new java.awt.Dimension(285, 63));
        jButton2.setRequestFocusEnabled(false);
        jButton2.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/bolly_dance_rollover.png"))); // NOI18N

        jButton3.setBackground(new java.awt.Color(51, 42, 85));
        jButton3.setFont(new java.awt.Font("Yu Gothic", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/liked_songs.png"))); // NOI18N
        jButton3.setBorder(null);
        jButton3.setBorderPainted(false);
        jButton3.setContentAreaFilled(false);
        jButton3.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton3.setIconTextGap(10);
        jButton3.setPreferredSize(new java.awt.Dimension(285, 63));
        jButton3.setRequestFocusEnabled(false);
        jButton3.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/liked_songs_rollover.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(51, 42, 85));
        jButton4.setFont(new java.awt.Font("Yu Gothic", 1, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/taylor.png"))); // NOI18N
        jButton4.setBorder(null);
        jButton4.setBorderPainted(false);
        jButton4.setContentAreaFilled(false);
        jButton4.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton4.setIconTextGap(10);
        jButton4.setPreferredSize(new java.awt.Dimension(285, 63));
        jButton4.setRequestFocusEnabled(false);
        jButton4.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/taylor_rollover.png"))); // NOI18N

        jButton5.setBackground(new java.awt.Color(51, 42, 85));
        jButton5.setFont(new java.awt.Font("Yu Gothic", 1, 14)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shreya_playlist.png"))); // NOI18N
        jButton5.setBorder(null);
        jButton5.setBorderPainted(false);
        jButton5.setContentAreaFilled(false);
        jButton5.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton5.setIconTextGap(10);
        jButton5.setPreferredSize(new java.awt.Dimension(285, 63));
        jButton5.setRequestFocusEnabled(false);
        jButton5.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/shreya_playlist_rollover.png"))); // NOI18N

        jButton6.setBackground(new java.awt.Color(51, 42, 85));
        jButton6.setFont(new java.awt.Font("Yu Gothic", 1, 14)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/old_bolly.png"))); // NOI18N
        jButton6.setBorder(null);
        jButton6.setBorderPainted(false);
        jButton6.setContentAreaFilled(false);
        jButton6.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton6.setIconTextGap(10);
        jButton6.setPreferredSize(new java.awt.Dimension(285, 63));
        jButton6.setRequestFocusEnabled(false);
        jButton6.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/old_bolly_rollover.png"))); // NOI18N

        jButton7.setBackground(new java.awt.Color(51, 42, 85));
        jButton7.setFont(new java.awt.Font("Yu Gothic", 1, 14)); // NOI18N
        jButton7.setForeground(new java.awt.Color(255, 255, 255));
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/garba.png"))); // NOI18N
        jButton7.setBorder(null);
        jButton7.setBorderPainted(false);
        jButton7.setContentAreaFilled(false);
        jButton7.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        jButton7.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton7.setIconTextGap(10);
        jButton7.setRequestFocusEnabled(false);
        jButton7.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/garba_rollover.png"))); // NOI18N
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setBackground(new java.awt.Color(51, 42, 85));
        jButton8.setFont(new java.awt.Font("Yu Gothic", 1, 14)); // NOI18N
        jButton8.setForeground(new java.awt.Color(255, 255, 255));
        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/garba_2.png"))); // NOI18N
        jButton8.setBorder(null);
        jButton8.setBorderPainted(false);
        jButton8.setContentAreaFilled(false);
        jButton8.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        jButton8.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton8.setIconTextGap(10);
        jButton8.setRequestFocusEnabled(false);
        jButton8.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/garba_2_rollover.png"))); // NOI18N
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Made For You");

        bajirao_mastani.setBackground(new java.awt.Color(17, 17, 17));
        bajirao_mastani.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bajirao.png"))); // NOI18N
        bajirao_mastani.setBorderPainted(false);
        bajirao_mastani.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bajirao_mastaniActionPerformed(evt);
            }
        });

        taylor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/taylor_rp.png"))); // NOI18N
        taylor.setBorderPainted(false);
        taylor.setContentAreaFilled(false);
        taylor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taylorActionPerformed(evt);
            }
        });

        nature.setBackground(new java.awt.Color(17, 17, 17));
        nature.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nature.png"))); // NOI18N
        nature.setBorderPainted(false);
        nature.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                natureActionPerformed(evt);
            }
        });

        ghoomar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ghoomar.png"))); // NOI18N
        ghoomar.setBorderPainted(false);
        ghoomar.setContentAreaFilled(false);
        ghoomar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ghoomarActionPerformed(evt);
            }
        });

        jPanel6.setPreferredSize(new java.awt.Dimension(1229, 64));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, 1230, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(nature)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bajirao_mastani)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ghoomar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(taylor)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton8, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bajirao_mastani, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nature, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ghoomar, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(85, 85, 85)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(taylor, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        controls.setBackground(new java.awt.Color(0, 0, 0));
        controls.setForeground(new java.awt.Color(204, 204, 204));
        controls.setPreferredSize(new java.awt.Dimension(1229, 72));

        playpause.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pause.png"))); // NOI18N
        playpause.setBorderPainted(false);
        playpause.setContentAreaFilled(false);
        playpause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playpauseActionPerformed(evt);
            }
        });

        next.setIcon(new javax.swing.ImageIcon(getClass().getResource("/next.png"))); // NOI18N
        next.setBorderPainted(false);
        next.setContentAreaFilled(false);
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });

        previous.setIcon(new javax.swing.ImageIcon(getClass().getResource("/prev.png"))); // NOI18N
        previous.setBorderPainted(false);
        previous.setContentAreaFilled(false);
        previous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousActionPerformed(evt);
            }
        });

        progress.setBackground(new java.awt.Color(51, 51, 51));
        progress.setForeground(new java.awt.Color(204, 204, 204));
        progress.setBorder(null);
        progress.setPreferredSize(new java.awt.Dimension(376, 4));

        curr_duration.setBackground(new java.awt.Color(0, 0, 0));
        curr_duration.setForeground(new java.awt.Color(204, 204, 204));

        curr_start.setForeground(new java.awt.Color(204, 204, 204));
        curr_start.setText("0:00");

        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vol.png"))); // NOI18N
        jButton10.setBorder(null);
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jSlider1.setMajorTickSpacing(10);
        jSlider1.setMinorTickSpacing(1);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        like.setIcon(new javax.swing.ImageIcon(getClass().getResource("/plus.png"))); // NOI18N
        like.setBorder(null);
        like.setMaximumSize(new java.awt.Dimension(75, 75));
        like.setMinimumSize(new java.awt.Dimension(75, 75));
        like.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                likeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controlsLayout = new javax.swing.GroupLayout(controls);
        controls.setLayout(controlsLayout);
        controlsLayout.setHorizontalGroup(
            controlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(curr_start)
                .addGroup(controlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(controlsLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(progress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(curr_duration, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(controlsLayout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addComponent(previous, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(playpause, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(next, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(like, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(445, Short.MAX_VALUE))
        );
        controlsLayout.setVerticalGroup(
            controlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlsLayout.createSequentialGroup()
                .addGroup(controlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(controlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(curr_duration, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(controlsLayout.createSequentialGroup()
                            .addGroup(controlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(previous)
                                .addGroup(controlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(next, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(playpause, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(progress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(curr_start))
                    .addGroup(controlsLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(controlsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(controlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(like, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(playing_icon, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 1241, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(playing_artist, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(playing_songname, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(controls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(more)
                        .addGap(394, 394, 394)
                        .addComponent(home)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(home)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(more)
                        .addGap(19, 19, 19)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(playing_icon, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(playing_songname, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(playing_artist, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(controls, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1343, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 770, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void moreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moreActionPerformed
        // TODO add your handling code here:
        menu.show(more, 10, more.getHeight());
    }//GEN-LAST:event_moreActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void SearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchMouseClicked
        // TODO add your handling code here:
        try{
            if(fis==null){
            Search searchpage=new Search();
            searchpage.setVisible(true);
            setVisible(false);
        }
            else if(isPlaying){
        Search searchpage=new Search(isPlaying, songName, Songpath, elapsed, controls.isVisible(), fis.available(), total_length);
        running=false;
        if(isPlaying)
            player.close();
        setVisible(false);
        searchpage.setVisible(true);}
        else{
        Search searchpage=new Search(isPlaying, songName, Songpath, elapsed, controls.isVisible(), pause, total_length);
        running=false;
        setVisible(false);
        searchpage.setVisible(true);}
        }catch(Exception e){e.printStackTrace();}
        
    }//GEN-LAST:event_SearchMouseClicked

    private void SearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SearchKeyPressed
        // TODO add your handling code here:
        try{
            if(fis==null){
            Search searchpage=new Search();
            searchpage.setVisible(true);
            setVisible(false);
        }
            else if(isPlaying){
        Search searchpage=new Search(isPlaying, songName, Songpath, elapsed, controls.isVisible(), fis.available(), total_length);
        running=false;
        player.close();
        setVisible(false);
        searchpage.setVisible(true);}
        else{
        Search searchpage=new Search(isPlaying, songName, Songpath, elapsed, controls.isVisible(), pause, total_length);
        running=false;
        setVisible(false);
        searchpage.setVisible(true);}
        }catch(Exception e){e.printStackTrace();}
    }//GEN-LAST:event_SearchKeyPressed

    private void moreMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moreMousePressed


    }//GEN-LAST:event_moreMousePressed

    private void fileMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_fileMouseEntered

    private void bajirao_mastaniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bajirao_mastaniActionPerformed
        controls.setVisible(true);
        if(isPlaying)
        player.close();
        prev=songName;
        startTime=0;
        elapsed=0;
        playing_icon.setVisible(true);
        try{
            ResultSet res=sqldb.fetchdata("select * from songs where lower(name)='deewani mastani'");
            if(res.next()){
                ImageIcon songImage = new ImageIcon(res.getString("image"));
                Image scaledImage = songImage.getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH);
                playing_icon.setIcon(new ImageIcon(scaledImage));
                playing_songname.setText(res.getString("name"));
                songName=res.getString("name");
                playing_songname.setForeground(new Color(204,204,204));
                playing_songname.setFont(new Font("Tahoma", Font.BOLD, 14));
                playing_artist.setText(res.getString("artist"));
                playing_artist.setForeground(new Color(204,204,204));
                playing_artist.setFont(new Font("Tahoma", Font.PLAIN, 12));
                Songpath=res.getString("location");
                curr_duration.setText(res.getString("duration"));
                String[] parts = res.getString("duration").split(":");
                int minutes = Integer.parseInt(parts[0]);
                int seconds = Integer.parseInt(parts[1]);
                total_duration=minutes*60+seconds;
                ResultSet res1=sqldb.fetchdata("select * from liked_songs where song_path='"+Songpath+"'");
                
                controls.setVisible(true);
                play();
            }
            
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_bajirao_mastaniActionPerformed

    private void ghoomarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ghoomarActionPerformed
        // TODO add your handling code here:
       if(isPlaying)
        player.close();
       prev=songName;
        startTime=0;
        elapsed=0;
        controls.setVisible(true);
        playing_icon.setVisible(true);
        try{
            ResultSet res=sqldb.fetchdata("select * from songs where lower(name)='ghoomar'");
            if(res.next()){
                ImageIcon songImage = new ImageIcon(res.getString("image"));
                Image scaledImage = songImage.getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH);
                playing_icon.setIcon(new ImageIcon(scaledImage));
                playing_songname.setText(res.getString("name"));
                songName=res.getString("name");
                playing_songname.setForeground(new Color(204,204,204));
                playing_songname.setFont(new Font("Tahoma", Font.BOLD, 14));
                playing_artist.setText(res.getString("artist"));
                playing_artist.setForeground(new Color(204,204,204));
                playing_artist.setFont(new Font("Tahoma", Font.PLAIN, 12));
                Songpath=res.getString("location");
                curr_duration.setText(res.getString("duration"));
                String[] parts = res.getString("duration").split(":");
                int minutes = Integer.parseInt(parts[0]);
                int seconds = Integer.parseInt(parts[1]);
                total_duration=minutes*60+seconds;
                controls.setVisible(true);
                play();
            }
            
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_ghoomarActionPerformed

    private void taylorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taylorActionPerformed
        // TODO add your handling code here:
        if(isPlaying)
        player.close();
        prev=songName;
        startTime=0;
        elapsed=0;
        controls.setVisible(true);
        playing_icon.setVisible(true);
        try{
            ResultSet res=sqldb.fetchdata("select * from songs where lower(name)='a broken heart'");
            if(res.next()){
                ImageIcon songImage = new ImageIcon(res.getString("image"));
                Image scaledImage = songImage.getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH);
                playing_icon.setIcon(new ImageIcon(scaledImage));
                playing_songname.setText(res.getString("name"));
                songName=res.getString("name");
                playing_songname.setForeground(new Color(204,204,204));
                playing_songname.setFont(new Font("Tahoma", Font.BOLD, 14));
                playing_artist.setText(res.getString("artist"));
                playing_artist.setForeground(new Color(204,204,204));
                playing_artist.setFont(new Font("Tahoma", Font.PLAIN, 12));
                Songpath=res.getString("location");
                curr_duration.setText(res.getString("duration"));
                String[] parts = res.getString("duration").split(":");
                int minutes = Integer.parseInt(parts[0]);
                int seconds = Integer.parseInt(parts[1]);
                total_duration=minutes*60+seconds;
                controls.setVisible(true);
                play();
            }
            
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_taylorActionPerformed

    private void natureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_natureActionPerformed
        // TODO add your handling code here:
        if(isPlaying)
        player.close();
        prev=songName;
        startTime=0;
        elapsed=0;
        controls.setVisible(true);
        playing_icon.setVisible(true);
        try{
            ResultSet res=sqldb.fetchdata("select * from songs where lower(name)='nature sounds'");
            if(res.next()){
                ImageIcon songImage = new ImageIcon(res.getString("image"));
                Image scaledImage = songImage.getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH);
                playing_icon.setIcon(new ImageIcon(scaledImage));
                playing_songname.setText(res.getString("name"));
                songName=res.getString("name");
                playing_songname.setForeground(new Color(204,204,204));
                playing_songname.setFont(new Font("Tahoma", Font.BOLD, 14));
                playing_artist.setText(res.getString("artist"));
                playing_artist.setForeground(new Color(204,204,204));
                playing_artist.setFont(new Font("Tahoma", Font.PLAIN, 12));
                Songpath=res.getString("location");
                curr_duration.setText(res.getString("duration"));
                String[] parts = res.getString("duration").split(":");
                int minutes = Integer.parseInt(parts[0]);
                int seconds = Integer.parseInt(parts[1]);
                total_duration=minutes*60+seconds;
                controls.setVisible(true);
                play();
            }
            
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_natureActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        try{
            if(fis==null){
                new liked_playlist().setVisible(true);
                setVisible(false);
            }
            else if(isPlaying){
                new liked_playlist(isPlaying, songName, Songpath, elapsed, controls.isVisible(), fis.available(), total_length).setVisible(true);
       this.setVisible(false);
       running=false;
       if(isPlaying)
           player.close();
            }
            else{
        new liked_playlist(isPlaying, songName, Songpath, elapsed, controls.isVisible(), pause, total_length).setVisible(true);
       this.setVisible(false);
       running=false;
       if(isPlaying)
           player.close();}
        }catch(Exception e){}
    }//GEN-LAST:event_jButton3ActionPerformed

    private void likedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_likedActionPerformed
        // TODO add your handling code here:
        try{
            if(fis==null){
                new liked_playlist().setVisible(true);
                setVisible(false);
            }
            else if(isPlaying){
                new liked_playlist(isPlaying, songName, Songpath, elapsed, controls.isVisible(), fis.available(), total_length).setVisible(true);
       this.setVisible(false);
       running=false;
       if(isPlaying)
           player.close();
            }
            else{
        new liked_playlist(isPlaying, songName, Songpath, elapsed, controls.isVisible(), pause, total_length).setVisible(true);
       this.setVisible(false);
       running=false;
       if(isPlaying)
           player.close();}
        }catch(Exception e){}                    
    }//GEN-LAST:event_likedActionPerformed

    private void playpauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playpauseActionPerformed
        // TODO add your handling code here:
        if (isPlaying) {

            ImageIcon play = new ImageIcon("src\\main\\Resources\\play.png");
            Image scaledImage = play.getImage().getScaledInstance(50, 50, Image.SCALE_SMOOTH);
            playpause.setIcon(new ImageIcon(scaledImage));
            pause();
        } else {
            ImageIcon pause = new ImageIcon("src\\main\\Resources\\pause.png");
            Image scaledImage = pause.getImage().getScaledInstance(50, 50, Image.SCALE_SMOOTH);
            playpause.setIcon(new ImageIcon(scaledImage));
            resume();
        }
    }//GEN-LAST:event_playpauseActionPerformed

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
        // TODO add your handling code here:
        if(isPlaying)
        player.close();
        prev=songName;
        startTime=0;
        elapsed=0;
        controls.setVisible(true);
        playing_icon.setVisible(true);
        try{
            ResultSet res=sqldb.fetchdata("select * from songs");
            res.last(); // Move cursor to the last row
            int rowCount = res.getRow(); // Get the number of rows
            res.beforeFirst(); // Move cursor back to the beginning

            // Generate a random index
            Random random = new Random();
            int randomIndex = random.nextInt(rowCount);
            if (res.absolute(randomIndex + 1)){
                ImageIcon songImage = new ImageIcon(res.getString("image"));
                Image scaledImage = songImage.getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH);
                playing_icon.setIcon(new ImageIcon(scaledImage));
                playing_songname.setText(res.getString("name"));
                songName=res.getString("name");
                playing_songname.setForeground(new Color(204,204,204));
                playing_songname.setFont(new Font("Tahoma", Font.BOLD, 14));
                playing_artist.setText(res.getString("artist"));
                playing_artist.setForeground(new Color(204,204,204));
                playing_artist.setFont(new Font("Tahoma", Font.PLAIN, 12));
                Songpath=res.getString("location");
                curr_duration.setText(res.getString("duration"));
                String[] parts = res.getString("duration").split(":");
                int minutes = Integer.parseInt(parts[0]);
                int seconds = Integer.parseInt(parts[1]);
                total_duration=minutes*60+seconds;
                controls.setVisible(true);
                play();
            }

        }
        catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_nextActionPerformed

    private void previousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousActionPerformed
        // TODO add your handling code here:
        if(prev==null)
        return;

        if(isPlaying)
        player.close();

        String curr=prev;
        prev=songName;
        startTime=0;
        elapsed=0;
        controls.setVisible(true);
        playing_icon.setVisible(true);
        try{
            ResultSet res=sqldb.fetchdata("select * from songs where name='"+curr+"'");
            res.last(); // Move cursor to the last row
            int rowCount = res.getRow(); // Get the number of rows
            res.beforeFirst(); // Move cursor back to the beginning

            // Generate a random index
            Random random = new Random();
            int randomIndex = random.nextInt(rowCount);
            if (res.absolute(randomIndex + 1)){
                ImageIcon songImage = new ImageIcon(res.getString("image"));
                Image scaledImage = songImage.getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH);
                playing_icon.setIcon(new ImageIcon(scaledImage));
                playing_songname.setText(res.getString("name"));
                songName=res.getString("name");
                playing_songname.setForeground(new Color(204,204,204));
                playing_songname.setFont(new Font("Tahoma", Font.BOLD, 14));
                playing_artist.setText(res.getString("artist"));
                playing_artist.setForeground(new Color(204,204,204));
                playing_artist.setFont(new Font("Tahoma", Font.PLAIN, 12));
                Songpath=res.getString("location");
                curr_duration.setText(res.getString("duration"));
                String[] parts = res.getString("duration").split(":");
                int minutes = Integer.parseInt(parts[0]);
                int seconds = Integer.parseInt(parts[1]);
                total_duration=minutes*60+seconds;
                controls.setVisible(true);
                play();
            }

        }
        catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_previousActionPerformed

    private void likeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_likeActionPerformed
        // TODO add your handling code here:
        // Check if there is a song to like/unlike

        // Initialize the likedSongs HashSet if it's null
        if (likedSongs == null) {
            likedSongs = new HashSet<>();
        }

        // Load the icons for like and unlike states
        ImageIcon unlikeIcon = new ImageIcon("src\\main\\Resources\\plus.png");
        ImageIcon likedIcon = new ImageIcon("src\\main\\Resources\\liked.png");

        // Check if the song is already liked
        if (!likedSongs.contains(Songpath)) {
            // Like the song
            likedSongs.add(Songpath);  // Add song to liked list
            like.setIcon(likedIcon);  // Change icon to liked
            saveLikedSongToDB(Songpath);  // Save the liked song in the database
        } else {
            // Unlike the song
            likedSongs.remove(Songpath);  // Remove song from liked list
            like.setIcon(unlikeIcon);  // Change icon to unliked
            removeLikedSongFromDB(Songpath);  // Remove the song from the database
        }
    }//GEN-LAST:event_likeActionPerformed
private void saveLikedSongToDB(String songPath) {
    String query = "INSERT INTO liked_songs (song_path, liked_at) VALUES ('" + songPath.replace("\\","\\\\") + "', CURRENT_TIMESTAMP) " +
                   "ON DUPLICATE KEY UPDATE liked_at = CURRENT_TIMESTAMP";
    sqldb.iud_data(query);
    System.out.println(songPath);// Assuming sqldb has an executeUpdate method
}

    private void removeLikedSongFromDB(String songPath) {
    String query = "DELETE FROM liked_songs WHERE song_path = '" + songPath + "'";
    sqldb.iud_data(query);  // Assuming sqldb has an executeUpdate method
}
    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        // Load the mute and unmute icons
        // Load the mute and unmute icons
        ImageIcon muteIcon = new ImageIcon("src\\main\\Resources\\mute.png"); // Mute icon
        ImageIcon unmuteIcon = new ImageIcon("src\\main\\Resources\\vol.png"); // Unmute icon

        String nircmdPath = "C:\\Users\\deeks\\Desktop\\Spotify_clone\\nircmd.exe\\"; // Update this path to where your nircmd.exe is located

        if (!isMuted) {
            // Mute the system sound
            isMuted = true;
            jButton10.setIcon(muteIcon); // Change button icon to mute
            try {
                // Execute NirCmd to mute the system volume using ProcessBuilder
                ProcessBuilder processBuilder = new ProcessBuilder(nircmdPath, "mutesysvolume", "1");
                Process process = processBuilder.start();

                // Capture the output and errors
                process.waitFor();
                System.out.println("Process executed: " + process.exitValue());
            } catch (IOException | InterruptedException e) {
                System.err.println("Error executing NirCmd: " + e.getMessage());
                e.printStackTrace();
            }
        } else {
            // Unmute the system sound
            isMuted = false;
            jButton10.setIcon(unmuteIcon); // Change button icon to unmute
            try {
                // Execute NirCmd to unmute the system volume using ProcessBuilder
                ProcessBuilder processBuilder = new ProcessBuilder(nircmdPath, "mutesysvolume", "0");
                Process process = processBuilder.start();

                // Capture the output and errors
                process.waitFor();
                System.out.println("Process executed: " + process.exitValue());
            } catch (IOException | InterruptedException e) {
                System.err.println("Error executing NirCmd: " + e.getMessage());
                e.printStackTrace();
            }
        }

    }//GEN-LAST:event_jButton10ActionPerformed
private void setSystemVolume(int volume) {
        try {
            // Convert slider value (0-100) to NirCmd volume scale (0-65535)
            int volumeLevel = (volume * 65535) / 100;
            ProcessBuilder processBuilder = new ProcessBuilder(nircmdPath, "setsysvolume", String.valueOf(volumeLevel));
            Process process = processBuilder.start();
            process.waitFor();  // Wait for NirCmd to finish
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }
    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        // TODO add your handling code here:
        int volume = jSlider1.getValue();  // Get the slider's current value
        setSystemVolume(volume);  // Set the system volume dynamically
    }//GEN-LAST:event_jSlider1StateChanged

    private void fileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileActionPerformed
private void continue_playing(int play_from){
    try {
                fis = new FileInputStream(Songpath);
                bis=new BufferedInputStream(fis);
                player= new Player(bis);
                fis.skip(total_length-play_from);
                isPlaying=true;
                startTime=System.currentTimeMillis()/1000;
                new Thread()
                { 
                    public void run(){
                        try{
                            player.play();
                            startTime = System.currentTimeMillis();
                            
                        }
                        catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }.start();
                progress_t=new Thread()
                {
                    public void run(){
                        running=true;
                        long session_elapsed=elapsed;
                        while (running & isPlaying) {
                            // Calculate the current playback position
                            try{
                                
                                long currentLength = session_elapsed+(System.currentTimeMillis()/1000-startTime);
                                elapsed=currentLength;
                                if (total_duration==0)
                                    total_duration=1;
                                progress.setValue((int)currentLength*100/total_duration);
                                String st_min=String.valueOf(currentLength/60);
                                String st_sec=String.valueOf(currentLength%60);
                                if(st_min.length()==1){
                                    st_min="0"+st_min;
                                }
                                if(st_sec.length()==1){
                                    st_sec="0"+st_sec;
                                }
                                curr_start.setText(st_min+":"+st_sec);
                                System.out.println("Elapsed Time: " + (currentLength) + " ms");
                                Thread.sleep(1000);
                            }catch(Exception e){
                                e.printStackTrace();
                            }

                        }
                    }
                };
                progress_t.start();
            }catch(Exception e){
                        e.printStackTrace();
            }
    }
    private void play() {
            try {
                fis = new FileInputStream(Songpath);
                bis=new BufferedInputStream(fis);
                player= new Player(bis);
                total_length=fis.available();
                isPlaying=true;
                startTime = System.currentTimeMillis()/1000;
                ImageIcon pause = new ImageIcon("src\\main\\Resources\\pause.png");
                Image scaledImage = pause.getImage().getScaledInstance(50, 50, Image.SCALE_SMOOTH);
                playpause.setIcon(new ImageIcon(scaledImage));
                
                new Thread()
                { 
                    public void run(){
                        try{
                            player.play();
                            
                            
                        }
                        catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }.start();
                progress_t=new Thread()
                {
                    public void run(){
                        long session_elapsed=elapsed;
                        running=true;
                        while (running & isPlaying) {
                            // Calculate the current playback position
                            try{
                                
                                long currentLength = session_elapsed+(System.currentTimeMillis()/1000-startTime);
                                elapsed=currentLength;
                                if (total_duration==0)
                                    total_duration=1;
                                progress.setValue((int)currentLength*100/total_duration);
                                String st_min=String.valueOf(currentLength/60);
                                String st_sec=String.valueOf(currentLength%60);
                                if(st_min.length()==1){
                                    st_min="0"+st_min;
                                }
                                if(st_sec.length()==1){
                                    st_sec="0"+st_sec;
                                }
                                
                                curr_start.setText(st_min+":"+st_sec);
                                System.out.println("Elapsed Time: " + (currentLength) + " ms");
                                Thread.sleep(1000);
                            }catch(Exception e){
                                e.printStackTrace();
                            }

                        }
                        }
                };
                progress_t.start();
            }catch(Exception e){
                        e.printStackTrace();
            }
    }
private void pause(){
    if(player!=null){
        try{
            pause=fis.available();
            player.close();
            isPlaying = false;
        }catch(Exception e){
            e.printStackTrace();
        }
        
    }
}
private void resume() {
            try {
                fis = new FileInputStream(Songpath);
                bis=new BufferedInputStream(fis);
                player= new Player(bis);
                fis.skip(total_length-pause);
                isPlaying=true;
                startTime=System.currentTimeMillis()/1000;
                new Thread()
                { 
                    public void run(){
                        try{
                            player.play();
                            startTime = System.currentTimeMillis();
                            
                        }
                        catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }.start();
                progress_t=new Thread()
                {
                    public void run(){
                        running=true;
                        long session_elapsed=elapsed;
                        while (running & isPlaying) {
                            // Calculate the current playback position
                            try{
                                
                                long currentLength = session_elapsed+(System.currentTimeMillis()/1000-startTime);
                                elapsed=currentLength;
                                if (total_duration==0)
                                    total_duration=1;
                                progress.setValue((int)currentLength*100/total_duration);
                                String st_min=String.valueOf(currentLength/60);
                                String st_sec=String.valueOf(currentLength%60);
                                if(st_min.length()==1){
                                    st_min="0"+st_min;
                                }
                                if(st_sec.length()==1){
                                    st_sec="0"+st_sec;
                                }
                                curr_start.setText(st_min+":"+st_sec);
                                System.out.println("Elapsed Time: " + (currentLength) + " ms");
                                Thread.sleep(1000);
                            }catch(Exception e){
                                e.printStackTrace();
                            }

                        }
                    }
                };
                progress_t.start();
            }catch(Exception e){
                        e.printStackTrace();
            }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Search;
    private javax.swing.JButton bajirao_mastani;
    private javax.swing.JPanel controls;
    private javax.swing.JLabel curr_duration;
    private javax.swing.JLabel curr_start;
    private javax.swing.JMenuItem edit;
    private javax.swing.JMenuItem file;
    private javax.swing.JButton ghoomar;
    private javax.swing.JMenuItem help;
    private javax.swing.JButton home;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JButton like;
    private javax.swing.JButton liked;
    private javax.swing.JButton liked1;
    private javax.swing.JPopupMenu menu;
    private javax.swing.JButton more;
    private javax.swing.JButton nature;
    private javax.swing.JButton next;
    private javax.swing.JMenuItem playback;
    private javax.swing.JLabel playing_artist;
    private javax.swing.JLabel playing_icon;
    private javax.swing.JLabel playing_songname;
    private javax.swing.JButton playpause;
    private javax.swing.JButton previous;
    private javax.swing.JProgressBar progress;
    private javax.swing.JButton rehman;
    private javax.swing.JButton shreya;
    private javax.swing.JButton taylor;
    private javax.swing.JMenuItem view;
    // End of variables declaration//GEN-END:variables
}
class GradientPanel extends JPanel {
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;

        // Create a gradient paint from dark blue to black
        GradientPaint gradientPaint = new GradientPaint(
                0, 0, new Color(32, 18, 85), // Dark blue color
                0, getHeight()* 0.5f, Color.BLACK // Black color
        );

        g2d.setPaint(gradientPaint);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }
}
class GlowButtonExample extends JButton {
       @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                if (getMousePosition() != null) {
                    // Draw a soft glow effect
                    Graphics2D g2d = (Graphics2D) g;
                    g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.2f));
                    g2d.setColor(new Color(32, 18, 85));
                    g2d.fillRoundRect(0, 0, getWidth(), getHeight(), 20, 20);
                }
            }
    GlowButtonExample() {
        addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                repaint(); // Repaint the button to apply the glow effect
            }

            @Override
            public void mouseExited(MouseEvent e) {
                repaint(); // Repaint the button to remove the glow effect
            }
        });

        // Custom painting for glow effect
       setContentAreaFilled(false);
       setOpaque(false);
    }
    
}
class BlackMenu extends JPopupMenu {
    BlackMenu(){
            setPreferredSize(new Dimension(150, 150));
            setOpaque(false);
    }
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.setColor(new Color(17,17,17)); // Set background color to black
                g.fillRect(0, 0, getWidth(), getHeight());
                
            }
    }
class CustomProgressBar extends JProgressBar {

    public CustomProgressBar() {
        super();
        setStringPainted(true);
        setValue(0);
    }

    @Override
    protected void paintComponent(Graphics g) {
        // Call the super method to ensure basic rendering happens
        super.paintComponent(g);
        
        // Get the size of the progress bar
        int width = getWidth();
        int height = getHeight();

        // Calculate the width of the filled area based on the current value
        int filledWidth = (int) (width * ((float) getValue() / getMaximum()));
        // Set custom colors
        Color foregroundColor = new Color(204,204,204); // Color for the filled part
        Color backgroundColor = new Color(51,51,51); // Color for the unfilled part
        
        // Paint the filled area
        g.setColor(foregroundColor);
        g.fillRect(0, 0, filledWidth, height);
        
        // Paint the background area
        g.setColor(backgroundColor);
        g.fillRect(filledWidth, 0, width - filledWidth, height);
        
        // Optionally, draw the text in the center
        
    }
}
class CustomSlider extends JSlider {

    public CustomSlider(int min, int max, int value) {
        super(min, max, value);
        setUI(new CustomSliderUI(this)); // Set the custom UI
        setOpaque(false); // Make slider background transparent
        setBorder(BorderFactory.createEmptyBorder());
        setFocusable(false);
    }

    // Custom Slider UI with a green-filled track and no thumb
    private static class CustomSliderUI extends BasicSliderUI {

        private static final int THUMB_RADIUS = 15;
        private static final Color TRACK_COLOR = Color.WHITE;
        private static final Color FILL_COLOR = new Color(30,215,96);

        public CustomSliderUI(JSlider b) {
            super(b);
            setSmoothSliderMovement();
        }

        private void setSmoothSliderMovement() {
            // Timer to update thumb position every 10 ms for smooth movement
            Timer smoothMovementTimer = new Timer(10, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    // Repaint the slider whenever the thumb position changes
                    slider.repaint();
                }
            });
            smoothMovementTimer.start(); // Start the smooth movement timer
        }

        @Override
        public void paintTrack(Graphics g) {
            // Get the dimensions of the slider
            Rectangle trackBounds = trackRect;
            Graphics2D g2d = (Graphics2D) g;
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

            // Paint the entire track in white
            g2d.setColor(TRACK_COLOR);
            g2d.fillRoundRect(trackBounds.x, trackBounds.y + (trackBounds.height / 4), trackBounds.width, trackBounds.height / 2, 10, 10);

            // Paint the filled portion (green)
            int fillWidth = (int) ((slider.getValue() - slider.getMinimum()) * 1.0 / (slider.getMaximum() - slider.getMinimum()) * trackBounds.width);
            g2d.setColor(FILL_COLOR);
            g2d.fillRoundRect(trackBounds.x, trackBounds.y + (trackBounds.height / 4), fillWidth, trackBounds.height / 2, 10, 10);
        }

        @Override
        public void paintThumb(Graphics g) {
            // Do nothing here to remove the thumb
        }

        
    }
}